@page "/Buildings"
@page "/Buildings/{site_key:int}"
@using DataAccessLibrary
@using DataAccessLibrary.Models
@inject NavigationManager NavigationManager
@inject BuildingService _buildingService
@inject SiteService _siteService
@inject StateService _stateService


<h1> Buildings</h1>
<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="New Building" Click="@InsertRow" Disabled=@(buildingToInsert != null) />
<RadzenDataGrid @ref="buildingsGrid" AllowFiltering="true" AllowPaging="true" PageSize="15" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@buildings" TItem="Building" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>
        <RadzenDataGridColumn TItem="Building" Property="NAME" Title="NAME" SortProperty="NAME">
            <EditTemplate Context="building">
                <RadzenTextBox @bind-Value="building.NAME" Data="@buildings" TextProperty="BuildingName" ValueProperty="NAME" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Building" Property="address" Title="ADDRESS">
            <EditTemplate Context="building">
            <RadzenTextBox @bind-Value="building.address" Data="@buildings" TextProperty="BuildingAddress" ValueProperty="Address" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Building" Property="city" Title="CITY">
            <EditTemplate Context="building">
                <RadzenTextBox @bind-Value="building.city" Data="@buildings" TextProperty="BuildingCity" ValueProperty="City" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>
                
        <RadzenDataGridColumn TItem="Building" Property="state" Title="STATE">
            <EditTemplate Context="building">
                <RadzenDropDown @bind-Value="building.state_key" AllowClear="true" Class="w-100" AllowFiltering="true" Data=@states TextProperty="abbreviation" ValueProperty="building.state_key" />
            </EditTemplate>
        </RadzenDataGridColumn>
                
        <RadzenDataGridColumn TItem="Building" Property="zip" Title="ZIP">
            <EditTemplate Context="building">
                <RadzenTextBox  @bind-Value="building.zip" Data="@buildings" TextProperty="BuildingZip" ValueProperty="Zip" Style="width:100%; display: block;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Building" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
            <Template Context="building">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(building))" @onclick:stopPropagation="true"></RadzenButton>
                <RadzenButton Icon="apartment" ButtonStyle="ButtonStyle.Light" Click="@(args => GoToRooms(building.building_key))"></RadzenButton>
                 <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(building))"  @onclick:stopPropagation="true"></RadzenButton>
            </Template>
            <EditTemplate Context="building">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(building))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(building))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<Building> buildingsGrid;
    IList<Building> buildings;
    IList<Site> sites;
    IList<State> states;
    Building buildingToInsert;
    [Parameter]
    public int site_key { get; set; }

    protected override async Task OnInitializedAsync()
    {
        buildings = await _buildingService.GetSiteBuildings(site_key);
        sites = await _siteService.GetSites();
        states = await _stateService.GetStates();
    }

    //creates a new blank row in UI grid bound to new object of type building; not sure if this fires the radzen rowcreate method which we have set to call the OnCreateRow method below
    async Task InsertRow()
    {
        buildingToInsert = new Building();

        await buildingsGrid.InsertRow(buildingToInsert);
    }

    //somehow this gets fired only when clicking save (checkmark symbol on ui) for a new row. not sure what actually calls this
    void OnCreateRow(Building building)
    {
        building.site_key = site_key;
        _buildingService.InsertBuilding(building);
    }

    //fires when save (checkmark symbol on ui) is clicked but now idea how this gets to OnCreateRow as this only calls UpdateRow which calls updatebuilding
    async Task SaveRow(Building building)
    {
        if (building == buildingToInsert)
        {
            buildingToInsert = null;
        }

        await buildingsGrid.UpdateRow(building);
    }

    async Task EditRow(Building building)
    {
        await buildingsGrid.EditRow(building);
    }

    void OnUpdateRow(Building building)
    {
        if (building == buildingToInsert)
        {
            buildingToInsert = null;
        }

        _buildingService.UpdateBuilding(building);

    }

    void CancelEdit(Building building)
    {
        if (building == buildingToInsert)
        {
            buildingToInsert = null;
        }

        buildingsGrid.CancelEditRow(building);

    }

     async Task DeleteRow(Building building)
    {
        if (building == buildingToInsert)
        {
            buildingToInsert = null;
        }

        if (buildings.Contains(building))
        {
           _buildingService.DeleteBuilding(building); 

            await buildingsGrid.Reload();
        }
        else
        {
            buildingsGrid.CancelEditRow(building);
        }
    }
     
    void GoToRooms(int site_key)  
     {    
         NavigationManager.NavigateTo("/Rooms/" + building_key);  
     }




}